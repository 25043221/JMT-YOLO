# parameters
# Make modifications during training
nc: 8  # number of classes
n_segcls: 9 # Number of segmented classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2               Output shape after layer 0: torch.Size([1, 64, 128, 128])
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4              Output shape after layer 1: torch.Size([1, 128, 64, 64])
   [-1, 3, C3, [128]],                             #Output shape after layer 2: torch.Size([1, 128, 64, 64])
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8             Output shape after layer 3: torch.Size([1, 256, 32, 32])
   [-1, 9, C3, [256]],                                #Output shape after layer 4: torch.Size([1, 256, 32, 32])
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16                                        Output shape after layer 5: torch.Size([1, 512, 16, 16])
   [-1, 9, C3, [512]],         #6                   Output shape after layer 6: torch.Size([1, 512, 16, 16])
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32                                       Output shape after layer 7: torch.Size([1, 1024, 8, 8])
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, C3, [1024, False]],  # 9
  ]

# YOLOv5 head
head:
  [[-1, 1, Conv, [512, 1, 1]],                                                   #Output shape after layer 10: torch.Size([1, 512, 8, 8])
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],       #11  torch.Size([1, 512, 16, 16])        Output shape after layer 11: torch.Size([1, 512, 16, 16])
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  # PANet是add, yolov5是concat
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)   # torch.Size([1, 1024, 8, 8])



   [[16, 19, 22], 1, SegMaskPSP, [n_segcls, 3, 256, False]],   #24

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)      #40
  ]
